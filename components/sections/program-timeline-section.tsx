"use client";
import React, { useState } from "react";
import { cn } from "@/lib/utils";
import { TextGenerateEffect } from "@/components/ui/text-generate-effect";
import { PointerHighlight } from "@/components/ui/pointer-highlight";
import { Badge } from "@/components/ui/badge";
import { BookOpen, Target, Users, Globe, Award, GraduationCap, Clock, Building } from "lucide-react";

export function ProgramTimelineSection() {
  const [activeSection, setActiveSection] = useState<number>(0);

  const programSections = [
    {
      id: 0,
      phase: "Th√¥ng tin chung",
      title: "Ch∆∞∆°ng tr√¨nh ƒê√†o t·∫°o",
      subtitle: "T√†i ch√≠nh - Ng√¢n h√†ng TABP CLC",
      description: "Ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o ch·∫•t l∆∞·ª£ng cao v·ªõi th√†nh ph·∫ßn ti·∫øng Anh b√°n ph·∫ßn, ƒë∆∞·ª£c thi·∫øt k·∫ø theo ti√™u chu·∫©n qu·ªëc t·∫ø.",
      details: {
        vietnamese: "T√†i ch√≠nh ‚Äì Ng√¢n h√†ng; ti·∫øng Anh b√°n ph·∫ßn (CLC)",
        english: "Finance and Banking, partial English program (High-quality)",
        code: "7340201",
        level: "ƒê·∫°i h·ªçc",
        duration: "04 nƒÉm (08 h·ªçc k·ª≥)",
        format: "Ch√≠nh quy t·∫≠p trung",
        updated: "Th√°ng 6 nƒÉm 2024"
      },
      icon: "üéì",
      color: "from-blue-500 to-cyan-500",
      bgColor: "from-blue-50 to-cyan-50",
      position: "left"
    },
    {
      id: 1,
      phase: "M·ª•c ti√™u ch∆∞∆°ng tr√¨nh",
      title: "Program Objectives (PO)",
      subtitle: "ƒê·ªãnh h∆∞·ªõng ph√°t tri·ªÉn to√†n di·ªán",
      description: "Ph√°t tri·ªÉn sinh vi√™n th√†nh chuy√™n gia t√†i ch√≠nh ng√¢n h√†ng c√≥ nƒÉng l·ª±c qu·ªëc t·∫ø v√† th√≠ch ·ª©ng k·ªπ nguy√™n s·ªë.",
      objectives: [
        {
          type: "M·ª•c ti√™u chung (PO)",
          content: "N·∫Øm v·ªØng ki·∫øn th·ª©c n·ªÅn t·∫£ng hi·ªán ƒë·∫°i v·ªÅ kinh t·∫ø, ki·∫øn th·ª©c chuy√™n s√¢u v·ªÅ t√†i ch√≠nh ng√¢n h√†ng v·ªõi ph·∫©m ch·∫•t ƒë·∫°o ƒë·ª©c t·ªët v√† nƒÉng l·ª±c nghi√™n c·ª©u trong b·ªëi c·∫£nh h·ªôi nh·∫≠p qu·ªëc t·∫ø."
        },
        {
          type: "M·ª•c ti√™u c·ª• th·ªÉ (PO1)",
          content: "V·∫≠n d·ª•ng ki·∫øn th·ª©c khoa h·ªçc t·ª± nhi√™n, x√£ h·ªôi, c∆° b·∫£n v√† chuy√™n ng√†nh ƒë·ªÉ gi·∫£i quy·∫øt c√°c v·∫•n ƒë·ªÅ ph·ª©c t·∫°p trong lƒ©nh v·ª±c t√†i ch√≠nh ng√¢n h√†ng."
        }
      ],
      icon: "üéØ",
      color: "from-green-500 to-emerald-500",
      bgColor: "from-green-50 to-emerald-50",
      position: "right"
    },
    {
      id: 2,
      phase: "C·∫•u tr√∫c ch∆∞∆°ng tr√¨nh",
      title: "Kh·ªëi ki·∫øn th·ª©c",
      subtitle: "N·ªÅn t·∫£ng v√† chuy√™n s√¢u",
      description: "Ch∆∞∆°ng tr√¨nh ƒë∆∞·ª£c t·ªï ch·ª©c theo c√°c kh·ªëi ki·∫øn th·ª©c khoa h·ªçc, c√¢n b·∫±ng gi·ªØa n·ªÅn t·∫£ng v√† chuy√™n m√¥n.",
      knowledgeBlocks: [
        {
          title: "Kh·ªëi ki·∫øn th·ª©c c∆° b·∫£n",
          subjects: [
            "Tri·∫øt h·ªçc M√°c - L√™nin",
            "Kinh t·∫ø ch√≠nh tr·ªã M√°c - L√™nin",
            "Ch·ªß nghƒ©a x√£ h·ªôi khoa h·ªçc",
            "L·ªãch s·ª≠ ƒê·∫£ng C·ªông s·∫£n Vi·ªát Nam",
            "T∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh",
            "To√°n cao c·∫•p 1 & 2",
            "L√Ω thuy·∫øt x√°c su·∫•t v√† th·ªëng k√™",
            "Ph√°p lu·∫≠t ƒë·∫°i c∆∞∆°ng"
          ]
        },
        {
          title: "Kh·ªëi ki·∫øn th·ª©c chuy√™n ng√†nh",
          subjects: [
            "T√†i ch√≠nh doanh nghi·ªáp",
            "Ng√¢n h√†ng th∆∞∆°ng m·∫°i",
            "Th·ªã tr∆∞·ªùng t√†i ch√≠nh",
            "ƒê·∫ßu t∆∞ v√† qu·∫£n l√Ω danh m·ª•c",
            "Ph√¢n t√≠ch t√†i ch√≠nh",
            "Qu·∫£n tr·ªã r·ªßi ro",
            "T√†i ch√≠nh qu·ªëc t·∫ø",
            "FinTech v√† Ng√¢n h√†ng s·ªë"
          ]
        }
      ],
      icon: "üìö",
      color: "from-purple-500 to-violet-500",
      bgColor: "from-purple-50 to-violet-50",
      position: "left"
    },
    {
      id: 3,
      phase: "ƒê·∫∑c ƒëi·ªÉm ch∆∞∆°ng tr√¨nh",
      title: "Ch·∫•t l∆∞·ª£ng cao & Th·ª±c ti·ªÖn",
      subtitle: "Chu·∫©n qu·ªëc t·∫ø v√† ·ª©ng d·ª•ng",
      description: "Ch∆∞∆°ng tr√¨nh CLC v·ªõi ti√™u chu·∫©n qu·ªëc t·∫ø, t√≠ch h·ª£p c√¥ng ngh·ªá v√† ƒë·ªãnh h∆∞·ªõng th·ª±c ti·ªÖn m·∫°nh m·∫Ω.",
      features: [
        {
          title: "Ch∆∞∆°ng tr√¨nh CLC",
          points: [
            "Thi·∫øt k·∫ø theo ti√™u chu·∫©n ch·∫•t l∆∞·ª£ng cao",
            "Th√†nh ph·∫ßn ti·∫øng Anh b√°n ph·∫ßn",
            "T√≠ch h·ª£p ki·∫øn th·ª©c qu·ªëc t·∫ø"
          ]
        },
        {
          title: "ƒê·ªãnh h∆∞·ªõng th·ª±c ti·ªÖn",
          points: [
            "K·∫øt h·ª£p l√Ω thuy·∫øt v√† th·ª±c h√†nh",
            "Ph√°t tri·ªÉn nƒÉng l·ª±c nghi√™n c·ª©u",
            "Th√≠ch ·ª©ng k·ªπ nguy√™n s·ªë"
          ]
        }
      ],
      icon: "‚≠ê",
      color: "from-amber-500 to-orange-500",
      bgColor: "from-amber-50 to-orange-50",
      position: "right"
    }
  ];

  const ploMatrix = [
    {
      category: "M√¥n c∆° b·∫£n",
      level: "PLO 2-3",
      description: "Ki·∫øn th·ª©c n·ªÅn t·∫£ng",
      icon: BookOpen,
      color: "bg-blue-100 text-blue-800"
    },
    {
      category: "M√¥n chuy√™n ng√†nh",
      level: "PLO 3+",
      description: "Ki·∫øn th·ª©c chuy√™n s√¢u",
      icon: Target,
      color: "bg-green-100 text-green-800"
    },
    {
      category: "T·ªïng PLO",
      level: "PLO1-PLO11",
      description: "Ph√¢n b·ªï ƒë·ªÅu c√°c h·ªçc ph·∫ßn",
      icon: Award,
      color: "bg-purple-100 text-purple-800"
    }
  ];

  return (
    <section className="py-16 lg:py-24 bg-gradient-to-br from-zinc-50 via-gray-100 to-zinc-50 relative overflow-hidden">
      {/* Background decorations */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute top-20 left-20 w-72 h-72 bg-gradient-to-br from-blue-400/10 to-purple-600/10 rounded-full blur-3xl"></div>
        <div className="absolute bottom-20 right-20 w-72 h-72 bg-gradient-to-br from-emerald-400/10 to-cyan-600/10 rounded-full blur-3xl"></div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
        {/* Header */}
        <div className="text-center mb-16">
          <div className='w-full flex justify-end'>
          <PointerHighlight>
            <h2 className="text-3xl sm:text-4xl lg:text-5xl font-bold text-slate-800 p-4">
              C·∫•u tr√∫c Ch∆∞∆°ng tr√¨nh ƒê√†o t·∫°o
            </h2>
          </PointerHighlight>
          </div>
          <div className="max-w-3xl mx-auto">
            <TextGenerateEffect 
              words="V·ªõi c·∫•u tr√∫c khoa h·ªçc, t√≠ch h·ª£p y·∫øu t·ªë qu·ªëc t·∫ø v√† ƒë·ªãnh h∆∞·ªõng th·ª±c ti·ªÖn m·∫°nh m·∫Ω."
              className="text-lg text-slate-600"
            />
          </div>
        </div>

        {/* Timeline */}
        <div className="relative mb-16">
          {/* Central line - Hidden on mobile */}
          <div className="hidden md:block absolute left-1/2 transform -translate-x-1/2 w-1 h-full bg-gradient-to-b from-blue-400 via-green-400 via-purple-400 to-orange-400 rounded-full"></div>
          
          {/* Timeline items */}
          <div className="space-y-8 md:space-y-16">
            {programSections.map((section, index) => (
              <div
                key={section.id}
                className={cn(
                  "relative flex items-center",
                  // Mobile: center everything, Desktop: alternate left/right
                  "justify-center md:justify-start",
                  section.position === "right" && "md:justify-end"
                )}
              >
                {/* Timeline dot */}
                <div className={cn(
                  "z-20",
                  // Mobile: relative positioning, Desktop: absolute center
                  "relative md:absolute md:left-1/2 md:transform md:-translate-x-1/2",
                  // Mobile: show above content
                  "mb-4 md:mb-0"
                )}>
                  <div 
                    className={cn(
                      "w-12 h-12 md:w-16 md:h-16 rounded-full flex items-center justify-center text-lg md:text-2xl cursor-pointer transition-all duration-300 border-4 border-white shadow-lg mx-auto",
                      `bg-gradient-to-br ${section.color}`,
                      activeSection === section.id ? "scale-125 shadow-2xl" : "hover:scale-110"
                    )}
                    onClick={() => setActiveSection(activeSection === section.id ? -1 : section.id)}
                  >
                    {section.icon}
                  </div>
                </div>

                {/* Content card */}
                <div 
                  className={cn(
                    "w-full transition-all duration-500 cursor-pointer",
                    // Mobile: full width with padding, Desktop: max-width with side padding
                    "px-4 md:max-w-lg",
                    // Desktop positioning
                    section.position === "left" ? "md:mr-auto md:pr-16" : "md:ml-auto md:pl-16",
                    activeSection === section.id ? "scale-105" : "hover:scale-102"
                  )}
                  onClick={() => setActiveSection(activeSection === section.id ? -1 : section.id)}
                >
                  <div className={cn(
                    "bg-white/80 backdrop-blur-sm rounded-2xl md:rounded-3xl p-4 md:p-8 border border-white/50 shadow-xl transition-all duration-300",
                    activeSection === section.id ? "shadow-2xl ring-4 ring-blue-500/20" : ""
                  )}>
                    {/* Header */}
                    <div className="mb-4 md:mb-6">
                      <div className={cn(
                        "inline-flex items-center px-3 py-1.5 md:px-4 md:py-2 rounded-xl md:rounded-2xl text-white font-bold text-xs md:text-sm mb-2 md:mb-3 shadow-lg",
                        `bg-gradient-to-r ${section.color}`
                      )}>
                        {section.phase}
                      </div>
                      <h3 className="text-lg md:text-xl font-bold text-slate-800 mb-1 md:mb-2">{section.title}</h3>
                      <p className="text-xs md:text-sm font-medium text-slate-600">{section.subtitle}</p>
                    </div>

                    {/* Description */}
                    <p className="text-sm md:text-base text-slate-700 mb-4 md:mb-6 leading-relaxed">{section.description}</p>

                    {/* Detailed Content */}
                    <div className={cn(
                      "transition-all duration-500 overflow-hidden",
                      activeSection === section.id ? "max-h-[800px] opacity-100" : "max-h-0 opacity-0"
                    )}>
                      <div className="pt-3 md:pt-4 border-t border-slate-200">
                        {/* Program Details */}
                        {section.details && (
                          <div className="space-y-3 md:space-y-4">
                            <div className="grid grid-cols-1 lg:grid-cols-2 gap-3 md:gap-4">
                              <div>
                                <h4 className="font-semibold text-slate-800 mb-1.5 md:mb-2 text-sm md:text-base">T√™n ch∆∞∆°ng tr√¨nh</h4>
                                <p className="text-xs md:text-sm text-slate-700 mb-1">{section.details.vietnamese}</p>
                                <p className="text-xs text-slate-500 italic">{section.details.english}</p>
                              </div>
                              <div>
                                <h4 className="font-semibold text-slate-800 mb-1.5 md:mb-2 text-sm md:text-base">Th√¥ng tin c∆° b·∫£n</h4>
                                <div className="space-y-1">
                                  <Badge variant="outline" className="text-xs">M√£ ng√†nh: {section.details.code}</Badge>
                                  <p className="text-xs md:text-sm text-slate-700">Tr√¨nh ƒë·ªô: {section.details.level}</p>
                                  <p className="text-xs md:text-sm text-slate-700">Th·ªùi gian: {section.details.duration}</p>
                                  <p className="text-xs md:text-sm text-slate-700">H√¨nh th·ª©c: {section.details.format}</p>
                                </div>
                              </div>
                            </div>
                          </div>
                        )}

                        {/* Objectives */}
                        {section.objectives && (
                          <div className="space-y-3 md:space-y-4">
                            {section.objectives.map((objective, objIndex) => (
                              <div key={objIndex} className="bg-slate-50 rounded-lg p-3 md:p-4">
                                <h4 className="font-semibold text-slate-800 mb-1.5 md:mb-2 text-sm md:text-base">{objective.type}</h4>
                                <p className="text-xs md:text-sm text-slate-700 leading-relaxed">{objective.content}</p>
                              </div>
                            ))}
                          </div>
                        )}

                        {/* Knowledge Blocks */}
                        {section.knowledgeBlocks && (
                          <div className="grid grid-cols-1 lg:grid-cols-2 gap-3 md:gap-4">
                            {section.knowledgeBlocks.map((block, blockIndex) => (
                              <div key={blockIndex} className="bg-slate-50 rounded-lg p-3 md:p-4">
                                <h4 className="font-semibold text-slate-800 mb-2 md:mb-3 text-sm md:text-base">{block.title}</h4>
                                <div className="space-y-1.5 md:space-y-2">
                                  {block.subjects.map((subject, subIndex) => (
                                    <div key={subIndex} className="flex items-center gap-2">
                                      <div className={cn(
                                        "w-1.5 h-1.5 md:w-2 md:h-2 rounded-full flex-shrink-0",
                                        `bg-gradient-to-r ${section.color}`
                                      )}></div>
                                      <span className="text-xs text-slate-700">{subject}</span>
                                    </div>
                                  ))}
                                </div>
                              </div>
                            ))}
                          </div>
                        )}

                        {/* Features */}
                        {section.features && (
                          <div className="grid grid-cols-1 lg:grid-cols-2 gap-3 md:gap-4">
                            {section.features.map((feature, featureIndex) => (
                              <div key={featureIndex} className="bg-slate-50 rounded-lg p-3 md:p-4">
                                <h4 className="font-semibold text-slate-800 mb-2 md:mb-3 text-sm md:text-base">{feature.title}</h4>
                                <div className="space-y-1.5 md:space-y-2">
                                  {feature.points.map((point, pointIndex) => (
                                    <div key={pointIndex} className="flex items-center gap-2">
                                      <div className={cn(
                                        "w-1.5 h-1.5 md:w-2 md:h-2 rounded-full flex-shrink-0",
                                        `bg-gradient-to-r ${section.color}`
                                      )}></div>
                                      <span className="text-xs md:text-sm text-slate-700">{point}</span>
                                    </div>
                                  ))}
                                </div>
                              </div>
                            ))}
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* PLO Matrix */}
        <div className="bg-white/80 backdrop-blur-sm rounded-2xl md:rounded-3xl p-4 md:p-8 border border-white/50 shadow-xl mb-16">
          <h3 className="text-xl md:text-2xl font-bold text-slate-800 text-center mb-6 md:mb-8">
            Ma tr·∫≠n K·∫øt qu·∫£ H·ªçc t·∫≠p (PLO)
          </h3>
          
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6">
            {ploMatrix.map((item, index) => {
              const IconComponent = item.icon;
              return (
                <div key={index} className="text-center group cursor-pointer">
                  <div className="bg-white rounded-xl md:rounded-2xl p-4 md:p-6 shadow-lg hover:shadow-xl transition-all duration-300 group-hover:scale-105">
                    <IconComponent className="w-6 h-6 md:w-8 md:h-8 mx-auto mb-3 md:mb-4 text-slate-600" />
                    <h4 className="font-bold text-slate-800 mb-1.5 md:mb-2 text-sm md:text-base">{item.category}</h4>
                    <div className={cn(
                      "px-2.5 py-1 md:px-3 md:py-1 rounded-lg text-xs md:text-sm font-medium mb-1.5 md:mb-2",
                      item.color
                    )}>
                      {item.level}
                    </div>
                    <p className="text-xs md:text-sm text-slate-600">{item.description}</p>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </div>
    </section>
  );
}
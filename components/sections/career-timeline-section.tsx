"use client";
import React, { useState, useRef, useEffect, useMemo } from "react";
import { cn } from "@/lib/utils";
import { TextGenerateEffect } from "@/components/ui/text-generate-effect";
import { PointerHighlight } from "@/components/ui/pointer-highlight";
import { motion, useInView, AnimatePresence, useScroll, useTransform } from "framer-motion";
import { Drawer, DrawerTrigger, DrawerContent, DrawerHeader, DrawerTitle, DrawerDescription, DrawerClose } from "@/components/ui/drawer";
import { BookOpen, Target, CheckCircle, GraduationCap, Star, Award, Lightbulb, Briefcase, MapPin, TrendingUp, Clock, X, Sparkles, Zap, Badge } from "lucide-react";

export function CareerTimelineSection() {
  const [activePhase, setActivePhase] = useState<number>(0);
  const [isClient, setIsClient] = useState(false);
  const [height, setHeight] = useState(0);
  const ref = useRef<HTMLDivElement>(null);
  const containerRef = useRef<HTMLDivElement>(null);
  const isInView = useInView(ref, { once: true, amount: 0.2 });

  useEffect(() => {
    setIsClient(true);
    if (ref.current) {
      const rect = ref.current.getBoundingClientRect();
      setHeight(rect.height);
    }
  }, []);

  const { scrollYProgress } = useScroll({
    target: containerRef,
    offset: ["start 10%", "end 50%"],
  });

  const heightTransform = useTransform(scrollYProgress, [0, 1], [0, height]);
  const opacityTransform = useTransform(scrollYProgress, [0, 0.1], [0, 1]);

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.3,
        delayChildren: 0.2
      }
    }
  };

  const headerVariants = {
    hidden: { opacity: 0, y: -60, scale: 0.9 },
    visible: {
      opacity: 1,
      y: 0,
      scale: 1,
      transition: {
        type: "spring" as const,
        stiffness: 100,
        damping: 15,
        duration: 1
      }
    }
  };

  const timelineVariants = {
    hidden: { scaleY: 0, opacity: 0 },
    visible: {
      scaleY: 1,
      opacity: 1,
      transition: {
        duration: 2,
        ease: ["easeIn", "easeOut"],
        delay: 0.5
      }
    }
  };

  const itemVariants = {
    hidden: { opacity: 0, x: 0, y: 50, scale: 0.8 },
    visible: (custom: { position: string; index: number }) => ({
      opacity: 1,
      x: 0,
      y: 0,
      scale: 1,
      transition: {
        type: "spring" as const,
        stiffness: 120,
        damping: 15,
        delay: custom.index * 0.3 + 0.8
      }
    })
  };

  const dotVariants = {
    hidden: { scale: 0, rotate: -180 },
    visible: (index: number) => ({
      scale: 1,
      rotate: 0,
      transition: {
        type: "spring" as const,
        stiffness: 200,
        damping: 15,
        delay: index * 0.3 + 1.2
      }
    })
  };

  const cardVariants = {
    hidden: { opacity: 0, scale: 0.9 },
    visible: (index: number) => ({
      opacity: 1,
      scale: 1,
      transition: {
        type: "spring" as const,
        stiffness: 100,
        damping: 15,
        delay: index * 0.3 + 1
      }
    })
  };

  const careerTimeline = [
    {
      id: 0,
      phase: "NƒÉm 1-2",
      title: "X√¢y d·ª±ng n·ªÅn t·∫£ng",
      subtitle: "Ki·∫øn th·ª©c c∆° b·∫£n v√† ƒë·ªãnh h∆∞·ªõng",
      description: "H·ªçc c√°c m√¥n c∆° s·ªü, l√†m quen v·ªõi lƒ©nh v·ª±c t√†i ch√≠nh ng√¢n h√†ng, tham gia c√°c ho·∫°t ƒë·ªông ngo·∫°i kh√≥a v√† c√¢u l·∫°c b·ªô chuy√™n ng√†nh.",
      skills: ["Ki·∫øn th·ª©c n·ªÅn t·∫£ng", "T∆∞ duy ph√¢n t√≠ch", "K·ªπ nƒÉng m·ªÅm", "Ti·∫øng Anh chuy√™n ng√†nh"],
      opportunities: ["H·ªçc b·ªïng", "Tham gia CLB", "Ho·∫°t ƒë·ªông t√¨nh nguy·ªán", "K·ªπ nƒÉng thuy·∫øt tr√¨nh"],
      icon: "üå±",
      color: "from-red-500 to-red-600",
      bgColor: "from-red-50 to-red-100",
      position: "left",
      modalContent: (
        <div className="max-h-[80vh] overflow-y-auto">
          {/* Header */}
          <div className="bg-gradient-to-r from-red-600 to-red-700 text-white p-6 rounded-t-2xl mb-6">
            <div className="flex items-center gap-4">
              <div className="p-3 bg-white/20 rounded-xl text-2xl">
                üå±
              </div>
              <div>
                <h2 className="text-2xl font-bold">NƒÉm 1-2: X√¢y d·ª±ng n·ªÅn t·∫£ng</h2>
                <p className="text-red-100">Ki·∫øn th·ª©c c∆° b·∫£n v√† ƒë·ªãnh h∆∞·ªõng</p>
              </div>
            </div>
          </div>

          {/* Content */}
          <div className="space-y-6">
            {/* Overview */}
            <div className="bg-red-50 p-6 rounded-xl border border-red-100">
              <h3 className="text-xl font-bold text-red-800 mb-4 flex items-center gap-2">
                <BookOpen className="w-5 h-5" />
                T·ªïng quan giai ƒëo·∫°n
              </h3>
              <p className="text-red-700 leading-relaxed">
                Giai ƒëo·∫°n ƒë·∫ßu ti√™n trong h√†nh tr√¨nh h·ªçc t·∫≠p, sinh vi√™n s·∫Ω ƒë∆∞·ª£c trang b·ªã nh·ªØng ki·∫øn th·ª©c n·ªÅn t·∫£ng v·ªØng ch·∫Øc v·ªÅ kinh t·∫ø, t√†i ch√≠nh v√† ng√¢n h√†ng. ƒê√¢y l√† th·ªùi ƒëi·ªÉm quan tr·ªçng ƒë·ªÉ h√¨nh th√†nh t∆∞ duy ph√¢n t√≠ch v√† ƒë·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp r√µ r√†ng.
              </p>
            </div>

            {/* Learning Objectives */}
            <div>
              <h3 className="text-xl font-bold text-slate-800 mb-4 flex items-center gap-2">
                <Target className="w-5 h-5 text-red-600" />
                M·ª•c ti√™u h·ªçc t·∫≠p
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {[
                  'N·∫Øm v·ªØng ki·∫øn th·ª©c kinh t·∫ø c∆° b·∫£n',
                  'Hi·ªÉu r√µ h·ªá th·ªëng t√†i ch√≠nh ng√¢n h√†ng',
                  'Ph√°t tri·ªÉn k·ªπ nƒÉng t∆∞ duy ph√¢n t√≠ch',
                  'R√®n luy·ªán k·ªπ nƒÉng giao ti·∫øp',
                  'X√¢y d·ª±ng n·ªÅn t·∫£ng ti·∫øng Anh',
                  'ƒê·ªãnh h∆∞·ªõng chuy√™n ng√†nh ph√π h·ª£p'
                ].map((objective, idx) => (
                  <div key={idx} className="flex items-start gap-3 p-3 bg-white rounded-lg border border-red-100">
                    <CheckCircle className="w-5 h-5 text-red-500 mt-0.5 flex-shrink-0" />
                    <span className="text-slate-700">{objective}</span>
                  </div>
                ))}
              </div>
            </div>

            {/* Key Subjects */}
            <div>
              <h3 className="text-xl font-bold text-slate-800 mb-4 flex items-center gap-2">
                <GraduationCap className="w-5 h-5 text-red-600" />
                M√¥n h·ªçc ch√≠nh
              </h3>
              <div className="space-y-4">
                {[
                  {
                    category: 'Ki·∫øn th·ª©c c∆° s·ªü',
                    subjects: ['Kinh t·∫ø vi m√¥', 'Kinh t·∫ø vƒ© m√¥', 'To√°n kinh t·∫ø', 'Th·ªëng k√™ kinh t·∫ø']
                  },
                  {
                    category: 'T√†i ch√≠nh c∆° b·∫£n',
                    subjects: ['Nguy√™n l√Ω t√†i ch√≠nh', 'K·∫ø to√°n c∆° b·∫£n', 'Ng√¢n h√†ng th∆∞∆°ng m·∫°i', 'Th·ªã tr∆∞·ªùng t√†i ch√≠nh']
                  },
                  {
                    category: 'K·ªπ nƒÉng m·ªÅm',
                    subjects: ['Ti·∫øng Anh th∆∞∆°ng m·∫°i', 'K·ªπ nƒÉng thuy·∫øt tr√¨nh', 'L√†m vi·ªác nh√≥m', 'T∆∞ duy s√°ng t·∫°o']
                  }
                ].map((category, idx) => (
                  <div key={idx} className="bg-gray-50 p-4 rounded-lg">
                    <h4 className="font-semibold text-slate-800 mb-2">{category.category}</h4>
                    <div className="flex flex-wrap gap-2">
                      {category.subjects.map((subject, subjectIdx) => (
                        <span key={subjectIdx} className="px-3 py-1 bg-red-100 text-red-700 rounded-full text-sm">
                          {subject}
                        </span>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Activities & Opportunities */}
            <div>
              <h3 className="text-xl font-bold text-slate-800 mb-4 flex items-center gap-2">
                <Star className="w-5 h-5 text-red-600" />
                Ho·∫°t ƒë·ªông v√† c∆° h·ªôi
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {[
                  'Tham gia C√¢u l·∫°c b·ªô T√†i ch√≠nh',
                  'Cu·ªôc thi Business Plan',
                  'Ch∆∞∆°ng tr√¨nh t√¨nh nguy·ªán',
                  'Workshop k·ªπ nƒÉng m·ªÅm',
                  'H·ªçc b·ªïng khuy·∫øn kh√≠ch h·ªçc t·∫≠p',
                  'Giao l∆∞u v·ªõi sinh vi√™n qu·ªëc t·∫ø'
                ].map((activity, idx) => (
                  <div key={idx} className="flex items-center gap-3 p-3 bg-gradient-to-r from-red-50 to-red-100 rounded-lg border border-red-200">
                    <Award className="w-5 h-5 text-red-600" />
                    <span className="text-slate-700 font-medium">{activity}</span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      )
    },
    {
      id: 1,
      phase: "NƒÉm 3",
      title: "Chuy√™n s√¢u v√† ·ª©ng d·ª•ng",
      subtitle: "FinTech v√† c√¥ng ngh·ªá t√†i ch√≠nh",
      description: "H·ªçc c√°c m√¥n chuy√™n s√¢u v·ªÅ FinTech, AI, Blockchain. Tham gia d·ª± √°n th·ª±c t·∫ø v·ªõi doanh nghi·ªáp v√† th·ª±c t·∫≠p ng·∫Øn h·∫°n.",
      skills: ["AI trong t√†i ch√≠nh", "Blockchain", "Ph√¢n t√≠ch d·ªØ li·ªáu", "Qu·∫£n tr·ªã r·ªßi ro"],
      opportunities: ["D·ª± √°n th·ª±c t·∫ø", "Th·ª±c t·∫≠p ng·∫Øn h·∫°n", "Ch·ª©ng ch·ªâ qu·ªëc t·∫ø", "Nghi√™n c·ª©u khoa h·ªçc"],
      icon: "üöÄ",
      color: "from-red-500 to-red-600",
      bgColor: "from-red-50 to-red-100",
      position: "right",
      modalContent: (
        <div className="max-h-[80vh] overflow-y-auto">
          {/* Header */}
          <div className="bg-gradient-to-r from-red-600 to-red-700 text-white p-6 rounded-t-2xl mb-6">
            <div className="flex items-center gap-4">
              <div className="p-3 bg-white/20 rounded-xl text-2xl">
                üöÄ
              </div>
              <div>
                <h2 className="text-2xl font-bold">NƒÉm 3: Chuy√™n s√¢u v√† ·ª©ng d·ª•ng</h2>
                <p className="text-red-100">FinTech v√† c√¥ng ngh·ªá t√†i ch√≠nh</p>
              </div>
            </div>
          </div>

          {/* Content */}
          <div className="space-y-6">
            {/* Overview */}
            <div className="bg-red-50 p-6 rounded-xl border border-red-100">
              <h3 className="text-xl font-bold text-red-800 mb-4 flex items-center gap-2">
                <BookOpen className="w-5 h-5" />
                T·ªïng quan giai ƒëo·∫°n
              </h3>
              <p className="text-red-700 leading-relaxed">
                Giai ƒëo·∫°n chuy√™n s√¢u v·ªõi tr·ªçng t√¢m l√† c√¥ng ngh·ªá t√†i ch√≠nh hi·ªán ƒë·∫°i. Sinh vi√™n s·∫Ω ti·∫øp c·∫≠n v·ªõi AI, Blockchain, Big Data v√† c√°c c√¥ng ngh·ªá ti√™n ti·∫øn kh√°c trong lƒ©nh v·ª±c t√†i ch√≠nh. ƒê√¢y l√† th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu ·ª©ng d·ª•ng ki·∫øn th·ª©c v√†o th·ª±c t·∫ø th√¥ng qua c√°c d·ª± √°n v√† th·ª±c t·∫≠p.
              </p>
            </div>

            {/* Learning Objectives */}
            <div>
              <h3 className="text-xl font-bold text-slate-800 mb-4 flex items-center gap-2">
                <Target className="w-5 h-5 text-red-600" />
                M·ª•c ti√™u h·ªçc t·∫≠p
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {[
                  'Th√†nh th·∫°o c√¥ng ngh·ªá FinTech',
                  '·ª®ng d·ª•ng AI trong t√†i ch√≠nh',
                  'Hi·ªÉu r√µ c√¥ng ngh·ªá Blockchain',
                  'Ph√¢n t√≠ch d·ªØ li·ªáu t√†i ch√≠nh',
                  'Qu·∫£n l√Ω r·ªßi ro hi·ªán ƒë·∫°i',
                  'Ph√°t tri·ªÉn s·∫£n ph·∫©m FinTech'
                ].map((objective, idx) => (
                  <div key={idx} className="flex items-start gap-3 p-3 bg-white rounded-lg border border-red-100">
                    <CheckCircle className="w-5 h-5 text-red-500 mt-0.5 flex-shrink-0" />
                    <span className="text-slate-700">{objective}</span>
                  </div>
                ))}
              </div>
            </div>

            {/* Key Subjects */}
            <div>
              <h3 className="text-xl font-bold text-slate-800 mb-4 flex items-center gap-2">
                <GraduationCap className="w-5 h-5 text-red-600" />
                M√¥n h·ªçc ch√≠nh
              </h3>
              <div className="space-y-4">
                {[
                  {
                    category: 'C√¥ng ngh·ªá FinTech',
                    subjects: ['AI trong t√†i ch√≠nh', 'Blockchain v√† Cryptocurrency', 'Digital Banking', 'Payment Systems']
                  },
                  {
                    category: 'Ph√¢n t√≠ch d·ªØ li·ªáu',
                    subjects: ['Big Data Analytics', 'Machine Learning', 'Financial Modeling', 'Risk Analytics']
                  },
                  {
                    category: '·ª®ng d·ª•ng th·ª±c t·∫ø',
                    subjects: ['FinTech Innovation', 'Startup Ecosystem', 'Digital Transformation', 'Regulatory Technology']
                  }
                ].map((category, idx) => (
                  <div key={idx} className="bg-gray-50 p-4 rounded-lg">
                    <h4 className="font-semibold text-slate-800 mb-2">{category.category}</h4>
                    <div className="flex flex-wrap gap-2">
                      {category.subjects.map((subject, subjectIdx) => (
                        <span key={subjectIdx} className="px-3 py-1 bg-red-100 text-red-700 rounded-full text-sm">
                          {subject}
                        </span>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Projects & Opportunities */}
            <div>
              <h3 className="text-xl font-bold text-slate-800 mb-4 flex items-center gap-2">
                <Lightbulb className="w-5 h-5 text-red-600" />
                D·ª± √°n v√† c∆° h·ªôi
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {[
                  'D·ª± √°n FinTech v·ªõi doanh nghi·ªáp',
                  'Th·ª±c t·∫≠p t·∫°i Techcombank',
                  'Ch·ª©ng ch·ªâ AWS/Google Cloud',
                  'Hackathon FinTech',
                  'Nghi√™n c·ª©u khoa h·ªçc NCKH',
                  'Startup Incubator Program'
                ].map((opportunity, idx) => (
                  <div key={idx} className="flex items-center gap-3 p-3 bg-gradient-to-r from-red-50 to-red-100 rounded-lg border border-red-200">
                    <Award className="w-5 h-5 text-red-600" />
                    <span className="text-slate-700 font-medium">{opportunity}</span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      )
    },
    {
      id: 2,
      phase: "NƒÉm 4",
      title: "Chu·∫©n b·ªã ngh·ªÅ nghi·ªáp",
      subtitle: "Th·ª±c t·∫≠p v√† lu·∫≠n vƒÉn",
      description: "Th·ª±c t·∫≠p t·ªët nghi·ªáp t·∫°i c√°c ng√¢n h√†ng, c√¥ng ty t√†i ch√≠nh ho·∫∑c FinTech. Ho√†n th√†nh lu·∫≠n vƒÉn v√† chu·∫©n b·ªã cho s·ª± nghi·ªáp.",
      skills: ["Kinh nghi·ªám th·ª±c t·∫ø", "Qu·∫£n l√Ω d·ª± √°n", "K·ªπ nƒÉng l√£nh ƒë·∫°o", "M·∫°ng l∆∞·ªõi ngh·ªÅ nghi·ªáp"],
      opportunities: ["Th·ª±c t·∫≠p c√≥ l∆∞∆°ng", "C∆° h·ªôi vi·ªác l√†m", "Lu·∫≠n vƒÉn xu·∫•t s·∫Øc", "Kh·ªüi nghi·ªáp"],
      icon: "üéØ",
      color: "from-red-500 to-red-600",
      bgColor: "from-red-50 to-red-100",
      position: "left",
      modalContent: (
        <div className="max-h-[80vh] overflow-y-auto">
          {/* Header */}
          <div className="bg-gradient-to-r from-red-600 to-red-700 text-white p-6 rounded-t-2xl mb-6">
            <div className="flex items-center gap-4">
              <div className="p-3 bg-white/20 rounded-xl text-2xl">
                üéØ
              </div>
              <div>
                <h2 className="text-2xl font-bold">NƒÉm 4: Chu·∫©n b·ªã ngh·ªÅ nghi·ªáp</h2>
                <p className="text-red-100">Th·ª±c t·∫≠p v√† lu·∫≠n vƒÉn</p>
              </div>
            </div>
          </div>

          {/* Content */}
          <div className="space-y-6">
            {/* Overview */}
            <div className="bg-red-50 p-6 rounded-xl border border-red-100">
              <h3 className="text-xl font-bold text-red-800 mb-4 flex items-center gap-2">
                <BookOpen className="w-5 h-5" />
                T·ªïng quan giai ƒëo·∫°n
              </h3>
              <p className="text-red-700 leading-relaxed">
                Giai ƒëo·∫°n cu·ªëi c·ªßa ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o, t·∫≠p trung v√†o vi·ªác ·ª©ng d·ª•ng to√†n b·ªô ki·∫øn th·ª©c ƒë√£ h·ªçc v√†o th·ª±c t·∫ø ngh·ªÅ nghi·ªáp. Sinh vi√™n s·∫Ω th·ª±c t·∫≠p t·∫°i c√°c t·ªï ch·ª©c t√†i ch√≠nh h√†ng ƒë·∫ßu, ho√†n th√†nh lu·∫≠n vƒÉn t·ªët nghi·ªáp v√† chu·∫©n b·ªã s·∫µn s√†ng cho th·ªã tr∆∞·ªùng lao ƒë·ªông.
              </p>
            </div>

            {/* Learning Objectives */}
            <div>
              <h3 className="text-xl font-bold text-slate-800 mb-4 flex items-center gap-2">
                <Target className="w-5 h-5 text-red-600" />
                M·ª•c ti√™u giai ƒëo·∫°n
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {[
                  'T√≠ch l≈©y kinh nghi·ªám th·ª±c t·∫ø',
                  'Ho√†n th√†nh lu·∫≠n vƒÉn ch·∫•t l∆∞·ª£ng cao',
                  'X√¢y d·ª±ng m·∫°ng l∆∞·ªõi ngh·ªÅ nghi·ªáp',
                  'Ph√°t tri·ªÉn k·ªπ nƒÉng l√£nh ƒë·∫°o',
                  'Chu·∫©n b·ªã cho th·ªã tr∆∞·ªùng lao ƒë·ªông',
                  'ƒê·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp r√µ r√†ng'
                ].map((objective, idx) => (
                  <div key={idx} className="flex items-start gap-3 p-3 bg-white rounded-lg border border-red-100">
                    <CheckCircle className="w-5 h-5 text-red-500 mt-0.5 flex-shrink-0" />
                    <span className="text-slate-700">{objective}</span>
                  </div>
                ))}
              </div>
            </div>

            {/* Internship Programs */}
            <div>
              <h3 className="text-xl font-bold text-slate-800 mb-4 flex items-center gap-2">
                <Briefcase className="w-5 h-5 text-red-600" />
                Ch∆∞∆°ng tr√¨nh th·ª±c t·∫≠p
              </h3>
              <div className="space-y-4">
                {[
                  {
                    category: 'Ng√¢n h√†ng th∆∞∆°ng m·∫°i',
                    companies: ['Vietcombank', 'Techcombank', 'BIDV', 'VPBank']
                  },
                  {
                    category: 'C√¥ng ty FinTech',
                    companies: ['MoMo', 'VNPay', 'Timo', 'Finhay']
                  },
                  {
                    category: 'T·∫≠p ƒëo√†n t√†i ch√≠nh',
                    companies: ['Vingroup', 'FPT', 'Viettel Money', 'SSI']
                  }
                ].map((category, idx) => (
                  <div key={idx} className="bg-gray-50 p-4 rounded-lg">
                    <h4 className="font-semibold text-slate-800 mb-2">{category.category}</h4>
                    <div className="flex flex-wrap gap-2">
                      {category.companies.map((company, companyIdx) => (
                        <span key={companyIdx} className="px-3 py-1 bg-red-100 text-red-700 rounded-full text-sm">
                          {company}
                        </span>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Thesis Topics */}
            <div>
              <h3 className="text-xl font-bold text-slate-800 mb-4 flex items-center gap-2">
                <GraduationCap className="w-5 h-5 text-red-600" />
                Ch·ªß ƒë·ªÅ lu·∫≠n vƒÉn ph·ªï bi·∫øn
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {[
                  'AI trong d·ª± b√°o t√†i ch√≠nh',
                  'Blockchain v√† thanh to√°n s·ªë',
                  'Ph√¢n t√≠ch r·ªßi ro t√≠n d·ª•ng',
                  'FinTech v√† ng√¢n h√†ng s·ªë',
                  'Sustainable Finance',
                  'Cryptocurrency v√† quy ƒë·ªãnh'
                ].map((topic, idx) => (
                  <div key={idx} className="flex items-center gap-3 p-3 bg-gradient-to-r from-red-50 to-red-100 rounded-lg border border-red-200">
                    <Award className="w-5 h-5 text-red-600" />
                    <span className="text-slate-700 font-medium">{topic}</span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      )
    },
    {
      id: 3,
      phase: "Sau t·ªët nghi·ªáp",
      title: "Ph√°t tri·ªÉn s·ª± nghi·ªáp",
      subtitle: "Chuy√™n gia t√†i ch√≠nh t∆∞∆°ng lai",
      description: "L√†m vi·ªác t·∫°i c√°c v·ªã tr√≠ chuy√™n m√¥n cao, ti·∫øp t·ª•c h·ªçc t·∫≠p v√† ph√°t tri·ªÉn, tr·ªü th√†nh chuy√™n gia h√†ng ƒë·∫ßu trong lƒ©nh v·ª±c.",
      skills: ["Chuy√™n m√¥n cao", "T∆∞ duy chi·∫øn l∆∞·ª£c", "Qu·∫£n l√Ω nh√≥m", "ƒê·ªïi m·ªõi s√°ng t·∫°o"],
      opportunities: ["V·ªã tr√≠ qu·∫£n l√Ω", "Chuy√™n gia t∆∞ v·∫•n", "Kh·ªüi nghi·ªáp FinTech", "Nghi√™n c·ª©u cao h·ªçc"],
      icon: "üëë",
      color: "from-red-500 to-red-600",
      bgColor: "from-red-50 to-red-100",
      position: "right",
      modalContent: (
        <div className="max-h-[80vh] overflow-y-auto">
          {/* Header */}
          <div className="bg-gradient-to-r from-red-600 to-red-700 text-white p-6 rounded-t-2xl mb-6">
            <div className="flex items-center gap-4">
              <div className="p-3 bg-white/20 rounded-xl text-2xl">
                üëë
              </div>
              <div>
                <h2 className="text-2xl font-bold">Sau t·ªët nghi·ªáp: Ph√°t tri·ªÉn s·ª± nghi·ªáp</h2>
                <p className="text-red-100">Chuy√™n gia t√†i ch√≠nh t∆∞∆°ng lai</p>
              </div>
            </div>
          </div>

          {/* Content */}
          <div className="space-y-6">
            {/* Overview */}
            <div className="bg-red-50 p-6 rounded-xl border border-red-100">
              <h3 className="text-xl font-bold text-red-800 mb-4 flex items-center gap-2">
                <BookOpen className="w-5 h-5" />
                T·ªïng quan giai ƒëo·∫°n
              </h3>
              <p className="text-red-700 leading-relaxed">
                B∆∞·ªõc v√†o th·ªã tr∆∞·ªùng lao ƒë·ªông v·ªõi ƒë·∫ßy ƒë·ªß ki·∫øn th·ª©c v√† k·ªπ nƒÉng c·∫ßn thi·∫øt. C·ª±u sinh vi√™n s·∫Ω c√≥ c∆° h·ªôi l√†m vi·ªác t·∫°i c√°c v·ªã tr√≠ chuy√™n m√¥n cao, ph√°t tri·ªÉn s·ª± nghi·ªáp theo nhi·ªÅu h∆∞·ªõng kh√°c nhau t·ª´ chuy√™n gia k·ªπ thu·∫≠t ƒë·∫øn l√£nh ƒë·∫°o doanh nghi·ªáp.
              </p>
            </div>

            {/* Career Paths */}
            <div>
              <h3 className="text-xl font-bold text-slate-800 mb-4 flex items-center gap-2">
                <MapPin className="w-5 h-5 text-red-600" />
                L·ªô tr√¨nh ngh·ªÅ nghi·ªáp
              </h3>
              <div className="space-y-4">
                {[
                  {
                    path: 'Chuy√™n gia FinTech',
                    positions: ['FinTech Analyst', 'Product Manager', 'Tech Lead', 'CTO']
                  },
                  {
                    path: 'Qu·∫£n l√Ω ng√¢n h√†ng',
                    positions: ['Relationship Manager', 'Branch Manager', 'Regional Director', 'CEO']
                  },
                  {
                    path: 'T∆∞ v·∫•n t√†i ch√≠nh',
                    positions: ['Financial Advisor', 'Senior Consultant', 'Partner', 'Managing Director']
                  },
                  {
                    path: 'Kh·ªüi nghi·ªáp',
                    positions: ['Co-founder', 'CEO Startup', 'Serial Entrepreneur', 'Venture Capitalist']
                  }
                ].map((career, idx) => (
                  <div key={idx} className="bg-gray-50 p-4 rounded-lg">
                    <h4 className="font-semibold text-slate-800 mb-2">{career.path}</h4>
                    <div className="flex flex-wrap gap-2">
                      {career.positions.map((position, positionIdx) => (
                        <span key={positionIdx} className="px-3 py-1 bg-red-100 text-red-700 rounded-full text-sm">
                          {position}
                        </span>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Success Stories */}
            <div>
              <h3 className="text-xl font-bold text-slate-800 mb-4 flex items-center gap-2">
                <TrendingUp className="w-5 h-5 text-red-600" />
                Th√†nh t·ª±u ti√™u bi·ªÉu
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {[
                  'CEO c√¥ng ty FinTech tri·ªáu ƒë√¥',
                  'Gi√°m ƒë·ªëc chi nh√°nh ng√¢n h√†ng',
                  'Chuy√™n gia AI h√†ng ƒë·∫ßu',
                  'Founder startup th√†nh c√¥ng',
                  'Nghi√™n c·ª©u sinh ti·∫øn sƒ©',
                  'Chuy√™n gia t∆∞ v·∫•n qu·ªëc t·∫ø'
                ].map((achievement, idx) => (
                  <div key={idx} className="flex items-center gap-3 p-3 bg-gradient-to-r from-red-50 to-red-100 rounded-lg border border-red-200">
                    <Award className="w-5 h-5 text-red-600" />
                    <span className="text-slate-700 font-medium">{achievement}</span>
                  </div>
                ))}
              </div>
            </div>

            {/* Continuous Learning */}
            <div>
              <h3 className="text-xl font-bold text-slate-800 mb-4 flex items-center gap-2">
                <Clock className="w-5 h-5 text-red-600" />
                H·ªçc t·∫≠p su·ªët ƒë·ªùi
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {[
                  'MBA t·∫°i tr∆∞·ªùng top',
                  'Ch·ª©ng ch·ªâ CFA/FRM',
                  'Executive Education',
                  'Kh√≥a h·ªçc c√¥ng ngh·ªá m·ªõi',
                  'H·ªôi th·∫£o qu·ªëc t·∫ø',
                  'M·∫°ng l∆∞·ªõi alumni'
                ].map((learning, idx) => (
                  <div key={idx} className="flex items-center gap-3 p-3 bg-white rounded-lg border border-red-100">
                    <CheckCircle className="w-5 h-5 text-red-500" />
                    <span className="text-slate-700">{learning}</span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      )
    }
  ];

  // Fixed seed values for consistent rendering
  const seedValues = useMemo(() => [
    { size: 120, x: 15, y: 20, delay: 0 },
    { size: 80, x: 85, y: 15, delay: 0.5 },
    { size: 100, x: 10, y: 70, delay: 1 },
    { size: 60, x: 90, y: 80, delay: 1.5 },
    { size: 140, x: 50, y: 10, delay: 2 }
  ], []);

  const sparklePositions = useMemo(() => [
    { x: 20, y: 30, delay: 0.2 },
    { x: 80, y: 25, delay: 0.8 },
    { x: 30, y: 75, delay: 1.4 },
    { x: 70, y: 85, delay: 2.0 },
    { x: 60, y: 40, delay: 2.6 }
  ], []);

  return (
    <motion.section
      ref={containerRef}
      className="py-6 bg-gradient-to-br from-slate-50 via-blue-50/30 to-purple-50/20 relative overflow-hidden"
      initial="hidden"
      animate={isInView ? "visible" : "hidden"}
      variants={containerVariants}
    >
      {/* Enhanced Background Effects */}
      <motion.div
        className="absolute inset-0 bg-gradient-to-br from-blue-50/40 via-purple-50/20 to-orange-50/30"
        initial={{ opacity: 0, scale: 1.2 }}
        animate={{
          opacity: isInView ? 1 : 0,
          scale: isInView ? 1 : 1.2,
          transition: { duration: 2, ease: "easeOut" }
        }}
      />

      {/* Floating Background Elements */}
      {isClient && (
        <div className="absolute inset-0">
          {seedValues.map((seed, index) => (
            <motion.div
              key={index}
              className="absolute rounded-full opacity-10"
              style={{
                width: `${seed.size}px`,
                height: `${seed.size}px`,
                left: `${seed.x}%`,
                top: `${seed.y}%`,
                background: index % 3 === 0 ? 'linear-gradient(135deg, #3b82f6, #8b5cf6)' : 
                           index % 3 === 1 ? 'linear-gradient(135deg, #8b5cf6, #ec4899)' : 
                           'linear-gradient(135deg, #06b6d4, #3b82f6)'
              }}
              animate={{
                y: [-20, 20, -20],
                x: [-10, 10, -10],
                rotate: [0, 180, 360],
                scale: [1, 1.1, 1]
              }}
              transition={{
                duration: 8 + index * 2,
                repeat: Infinity,
                ease: "easeInOut",
                delay: seed.delay
              }}
            />
          ))}
        </div>
      )}

      {/* Animated Sparkles */}
      {isClient && (
        <AnimatePresence>
          {sparklePositions.map((sparkle, index) => (
            <motion.div
              key={index}
              className="absolute z-10"
              style={{
                left: `${sparkle.x}%`,
                top: `${sparkle.y}%`
              }}
              initial={{ opacity: 0, scale: 0, rotate: -180 }}
              animate={{
                opacity: [0, 1, 0],
                scale: [0, 1, 0],
                rotate: [0, 180, 360]
              }}
              transition={{
                duration: 3,
                repeat: Infinity,
                ease: "easeInOut",
                delay: sparkle.delay
              }}
            >
              <Sparkles className="w-6 h-6 text-red-400" />
            </motion.div>
          ))}
        </AnimatePresence>
      )}

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
          {/* Enhanced Header */}
          <motion.div
            className="text-center mb-16 lg:mb-20"
            variants={headerVariants}
          >
            {/* Badge */}
            <motion.div 
              className="flex justify-center mb-6"
              initial={{ opacity: 0, scale: 0, rotate: -180 }}
              animate={{ opacity: 1, scale: 1, rotate: 0 }}
              transition={{ type: "spring", stiffness: 200, damping: 15, delay: 0.3 }}
            >
              <div className="inline-flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-red-500/10 to-red-600/10 backdrop-blur-sm border border-red-200/30 rounded-full">
                <MapPin className="w-4 h-4 text-red-600" />
                <span className="text-sm font-semibold text-red-700 dark:text-red-400">
                  H√†nh tr√¨nh 4 nƒÉm ph√°t tri·ªÉn
                </span>
                <TrendingUp className="w-4 h-4 text-red-600" />
              </div>
            </motion.div>

            <div className='w-full flex justify-center mb-6'>
              <PointerHighlight>
                <motion.h2
                  className="text-3xl font-bold bg-gradient-to-r from-red-600 via-red-700 to-red-800 bg-clip-text text-transparent p-4 leading-tight"
                  initial={{ opacity: 0, x: -100 }}
                  animate={{
                    opacity: isInView ? 1 : 0,
                    x: isInView ? 0 : -100,
                    transition: { delay: 0.3, duration: 0.8, type: "spring", stiffness: 100 }
                  }}
                >
                  L·ªô tr√¨nh ph√°t tri·ªÉn s·ª± nghi·ªáp
                </motion.h2>
              </PointerHighlight>
            </div>

        </motion.div>

        {/* Timeline */}
        <div ref={ref} className="relative max-w-7xl mx-auto pb-20">
          {careerTimeline.map((item, index) => (
            <Drawer key={item.id}>
              <div className="flex justify-start pt-10 md:pt-40 md:gap-10">
                <div className="sticky flex flex-col md:flex-row z-40 items-center top-40 self-start max-w-xs lg:max-w-sm md:w-full">
                  <motion.div
                    className={cn(
                      "h-16 w-16 rounded-full flex items-center justify-center text-2xl cursor-pointer transition-all duration-300 border-4 border-white shadow-lg",
                      `bg-gradient-to-b ${item.color}`,
                      activePhase === item.id ? "scale-125 shadow-2xl" : "hover:scale-110"
                    )}
                    variants={dotVariants}
                    initial="hidden"
                    animate={isInView ? "visible" : "hidden"}
                    custom={item.id}
                    onClick={() => setActivePhase(activePhase === item.id ? -1 : item.id)}
                    whileHover={{
                      scale: 1.2,
                      rotate: 10,
                      boxShadow: "0 10px 30px rgba(0, 0, 0, 0.2)",
                      transition: { duration: 0.3 }
                    }}
                    whileTap={{ scale: 0.95 }}
                  >
                    {item.icon}
                  </motion.div>
                  <h3 className="hidden md:block text-xl md:pl-20 md:text-3xl font-bold text-slate-600">
                    {item.phase}
                  </h3>
                </div>

                <div className="relative pl-20 pr-4 md:pl-4 w-full">
                  <h3 className="md:hidden block text-2xl mb-4 text-left font-bold text-slate-600">
                    {item.phase}
                  </h3>
                  <motion.div
                    className={cn(
                      "bg-white/80 backdrop-blur-sm rounded-2xl md:rounded-3xl p-4 md:p-8 border border-white/50 shadow-xl transition-all duration-300 cursor-pointer",
                      activePhase === item.id ? "shadow-2xl ring-4 ring-red-500/20" : ""
                    )}
                    variants={cardVariants}
                    initial="hidden"
                    animate={isInView ? "visible" : "hidden"}
                    custom={item.id}
                    whileHover={{
                      scale: 1.02,
                      y: -5,
                      boxShadow: "0 25px 50px rgba(0, 0, 0, 0.15)",
                      transition: { duration: 0.3 }
                    }}
                    whileTap={{ scale: 0.98 }}
                  >
                    <DrawerTrigger className="w-full text-left">
                      <div className="mb-4 md:mb-6">
                        <motion.div
                          className={cn(
                            "inline-flex items-center px-3 py-1.5 md:px-4 md:py-2 rounded-xl md:rounded-2xl text-white font-bold text-xs md:text-sm mb-2 md:mb-3 shadow-lg",
                            "bg-gradient-to-r " + item.color
                          )}
                          whileHover={{ scale: 1.1, transition: { duration: 0.2 } }}
                        >
                          {item.title}
                        </motion.div>
                        <h4 className="text-lg md:text-xl font-bold text-slate-800 mb-1 md:mb-2">
                          {item.subtitle}
                        </h4>
                      </div>

                      <p className="text-sm md:text-base text-slate-700 mb-4 md:mb-6 leading-relaxed">
                        {item.description}
                      </p>
                      
                      <div className="text-center">
                        <span className="text-xs text-red-600 font-medium">Nh·∫•n ƒë·ªÉ xem chi ti·∫øt ‚Üí</span>
                      </div>
                    </DrawerTrigger>
                  </motion.div>
                </div>
              </div>

              <DrawerContent className="w-full p-4">
                <DrawerHeader className="flex flex-row items-center justify-between">
                  <div>
                    <DrawerTitle className="text-2xl font-bold">{item.title}</DrawerTitle>
                  </div>
                  <DrawerClose className="p-2 hover:bg-slate-100 rounded-full transition-colors">
                    <X className="w-5 h-5" />
                  </DrawerClose>
                </DrawerHeader>
                {item.modalContent}
              </DrawerContent>
            </Drawer>
          ))}
          
          {/* Animated timeline line */}
          <div
            style={{
              height: height + "px",
            }}
            className="absolute md:left-8 left-8 top-0 overflow-hidden w-[2px] bg-[linear-gradient(to_bottom,var(--tw-gradient-stops))] from-transparent from-[0%] via-neutral-200 to-transparent to-[99%] [mask-image:linear-gradient(to_bottom,transparent_0%,black_10%,black_90%,transparent_100%)]"
          >
            <motion.div
              style={{
                height: heightTransform,
                opacity: opacityTransform,
              }}
              className="absolute inset-x-0 top-0 w-[2px] bg-gradient-to-t from-red-500 via-red-600 to-transparent from-[0%] via-[10%] rounded-full"
            />
          </div>
        </div>
      </div>
    </motion.section>
  );
}
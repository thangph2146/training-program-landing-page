"use client";
import React, { useState } from "react";
import { cn } from "@/lib/utils";
import { TextGenerateEffect } from "@/components/ui/text-generate-effect";
import { PointerHighlight } from "@/components/ui/pointer-highlight";

export function CareerTimelineSection() {
  const [activePhase, setActivePhase] = useState<number>(0);

  const careerTimeline = [
    {
      id: 0,
      phase: "NƒÉm 1-2",
      title: "X√¢y d·ª±ng n·ªÅn t·∫£ng",
      subtitle: "Ki·∫øn th·ª©c c∆° b·∫£n v√† ƒë·ªãnh h∆∞·ªõng",
      description: "H·ªçc c√°c m√¥n c∆° s·ªü, l√†m quen v·ªõi lƒ©nh v·ª±c t√†i ch√≠nh ng√¢n h√†ng, tham gia c√°c ho·∫°t ƒë·ªông ngo·∫°i kh√≥a v√† c√¢u l·∫°c b·ªô chuy√™n ng√†nh.",
      skills: ["Ki·∫øn th·ª©c n·ªÅn t·∫£ng", "T∆∞ duy ph√¢n t√≠ch", "K·ªπ nƒÉng m·ªÅm", "Ti·∫øng Anh chuy√™n ng√†nh"],
      opportunities: ["H·ªçc b·ªïng", "Tham gia CLB", "Ho·∫°t ƒë·ªông t√¨nh nguy·ªán", "K·ªπ nƒÉng thuy·∫øt tr√¨nh"],
      icon: "üå±",
      color: "from-green-500 to-emerald-500",
      bgColor: "from-green-50 to-emerald-50",
      position: "left"
    },
    {
      id: 1,
      phase: "NƒÉm 3",
      title: "Chuy√™n s√¢u v√† ·ª©ng d·ª•ng",
      subtitle: "FinTech v√† c√¥ng ngh·ªá t√†i ch√≠nh",
      description: "H·ªçc c√°c m√¥n chuy√™n s√¢u v·ªÅ FinTech, AI, Blockchain. Tham gia d·ª± √°n th·ª±c t·∫ø v·ªõi doanh nghi·ªáp v√† th·ª±c t·∫≠p ng·∫Øn h·∫°n.",
      skills: ["AI trong t√†i ch√≠nh", "Blockchain", "Ph√¢n t√≠ch d·ªØ li·ªáu", "Qu·∫£n tr·ªã r·ªßi ro"],
      opportunities: ["D·ª± √°n th·ª±c t·∫ø", "Th·ª±c t·∫≠p ng·∫Øn h·∫°n", "Ch·ª©ng ch·ªâ qu·ªëc t·∫ø", "Nghi√™n c·ª©u khoa h·ªçc"],
      icon: "üöÄ",
      color: "from-blue-500 to-cyan-500",
      bgColor: "from-blue-50 to-cyan-50",
      position: "right"
    },
    {
      id: 2,
      phase: "NƒÉm 4",
      title: "Chu·∫©n b·ªã ngh·ªÅ nghi·ªáp",
      subtitle: "Th·ª±c t·∫≠p v√† lu·∫≠n vƒÉn",
      description: "Th·ª±c t·∫≠p t·ªët nghi·ªáp t·∫°i c√°c ng√¢n h√†ng, c√¥ng ty t√†i ch√≠nh ho·∫∑c FinTech. Ho√†n th√†nh lu·∫≠n vƒÉn v√† chu·∫©n b·ªã cho s·ª± nghi·ªáp.",
      skills: ["Kinh nghi·ªám th·ª±c t·∫ø", "Qu·∫£n l√Ω d·ª± √°n", "K·ªπ nƒÉng l√£nh ƒë·∫°o", "M·∫°ng l∆∞·ªõi ngh·ªÅ nghi·ªáp"],
      opportunities: ["Th·ª±c t·∫≠p c√≥ l∆∞∆°ng", "C∆° h·ªôi vi·ªác l√†m", "Lu·∫≠n vƒÉn xu·∫•t s·∫Øc", "Kh·ªüi nghi·ªáp"],
      icon: "üéØ",
      color: "from-purple-500 to-violet-500",
      bgColor: "from-purple-50 to-violet-50",
      position: "left"
    },
    {
      id: 3,
      phase: "Sau t·ªët nghi·ªáp",
      title: "Ph√°t tri·ªÉn s·ª± nghi·ªáp",
      subtitle: "Chuy√™n gia t√†i ch√≠nh t∆∞∆°ng lai",
      description: "L√†m vi·ªác t·∫°i c√°c v·ªã tr√≠ chuy√™n m√¥n cao, ti·∫øp t·ª•c h·ªçc t·∫≠p v√† ph√°t tri·ªÉn, tr·ªü th√†nh chuy√™n gia h√†ng ƒë·∫ßu trong lƒ©nh v·ª±c.",
      skills: ["Chuy√™n m√¥n cao", "T∆∞ duy chi·∫øn l∆∞·ª£c", "Qu·∫£n l√Ω nh√≥m", "ƒê·ªïi m·ªõi s√°ng t·∫°o"],
      opportunities: ["V·ªã tr√≠ qu·∫£n l√Ω", "Chuy√™n gia t∆∞ v·∫•n", "Kh·ªüi nghi·ªáp FinTech", "Nghi√™n c·ª©u cao h·ªçc"],
      icon: "üëë",
      color: "from-amber-500 to-orange-500",
      bgColor: "from-amber-50 to-orange-50",
      position: "right"
    }
  ];

  const careerPaths = [
    {
      title: "Ng√¢n h√†ng truy·ªÅn th·ªëng",
      roles: ["Chuy√™n vi√™n t√≠n d·ª•ng", "Chuy√™n vi√™n ƒë·∫ßu t∆∞", "Qu·∫£n l√Ω r·ªßi ro", "Gi√°m ƒë·ªëc chi nh√°nh"],
      icon: "üè¶",
      color: "bg-blue-100 text-blue-800"
    },
    {
      title: "FinTech & Startup",
      roles: ["Product Manager", "Data Analyst", "Blockchain Developer", "Founder/Co-founder"],
      icon: "üí°",
      color: "bg-purple-100 text-purple-800"
    },
    {
      title: "T∆∞ v·∫•n t√†i ch√≠nh",
      roles: ["T∆∞ v·∫•n ƒë·∫ßu t∆∞", "Ph√¢n t√≠ch t√†i ch√≠nh", "Qu·∫£n l√Ω t√†i s·∫£n", "Chuy√™n gia M&A"],
      icon: "üìä",
      color: "bg-green-100 text-green-800"
    },
    {
      title: "Nghi√™n c·ª©u & Gi·∫£ng d·∫°y",
      roles: ["Nghi√™n c·ª©u vi√™n", "Gi·∫£ng vi√™n", "Chuy√™n gia ch√≠nh s√°ch", "T√°c gi·∫£/Blogger"],
      icon: "üéì",
      color: "bg-amber-100 text-amber-800"
    }
  ];

  return (
    <section className="py-16 lg:py-24 bg-gradient-to-br from-zinc-50 via-gray-100 to-zinc-50 relative overflow-hidden">
      {/* Background decorations */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute top-20 left-20 w-72 h-72 bg-gradient-to-br from-blue-400/10 to-purple-600/10 rounded-full blur-3xl"></div>
        <div className="absolute bottom-20 right-20 w-72 h-72 bg-gradient-to-br from-emerald-400/10 to-cyan-600/10 rounded-full blur-3xl"></div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
        {/* Header */}
        <div className="text-center mb-16">
          <div className='w-full flex justify-start'>
          <PointerHighlight>
            <h2 className="text-3xl sm:text-4xl lg:text-5xl font-bold text-slate-800 p-4">
              L·ªô tr√¨nh ph√°t tri·ªÉn s·ª± nghi·ªáp
            </h2>
          </PointerHighlight>
          </div>
          <div className="max-w-3xl mx-auto">
            <TextGenerateEffect 
              words="4 nƒÉm ƒë·∫ßy th√∫ v·ªã v√† c∆° h·ªôi ph√°t tri·ªÉn kh√¥ng gi·ªõi h·∫°n."
              className="text-lg text-slate-600"
            />
          </div>
        </div>

        {/* Timeline */}
        <div className="relative mb-16">
          {/* Central line - Hidden on mobile */}
          <div className="hidden md:block absolute left-1/2 transform -translate-x-1/2 w-1 h-full bg-gradient-to-b from-green-400 via-blue-400 via-purple-400 to-orange-400 rounded-full"></div>
          
          {/* Timeline items */}
          <div className="space-y-8 md:space-y-16">
            {careerTimeline.map((item, index) => (
              <div
                key={item.id}
                className={cn(
                  "relative flex items-center",
                  // Mobile: center everything, Desktop: alternate left/right
                  "justify-center md:justify-start",
                  item.position === "right" && "md:justify-end"
                )}
              >
                {/* Timeline dot */}
                <div className={cn(
                  "z-20",
                  // Mobile: relative positioning, Desktop: absolute center
                  "relative md:absolute md:left-1/2 md:transform md:-translate-x-1/2",
                  // Mobile: show above content
                  "mb-4 md:mb-0"
                )}>
                  <div 
                    className={cn(
                      "w-12 h-12 md:w-16 md:h-16 rounded-full flex items-center justify-center text-lg md:text-2xl cursor-pointer transition-all duration-300 border-4 border-white shadow-lg mx-auto",
                      `bg-gradient-to-br ${item.color}`,
                      activePhase === item.id ? "scale-125 shadow-2xl" : "hover:scale-110"
                    )}
                    onClick={() => setActivePhase(activePhase === item.id ? -1 : item.id)}
                  >
                    {item.icon}
                  </div>
                </div>

                {/* Content card */}
                <div 
                  className={cn(
                    "w-full transition-all duration-500 cursor-pointer",
                    // Mobile: full width with padding, Desktop: max-width with side padding
                    "px-4 md:max-w-lg",
                    // Desktop positioning
                    item.position === "left" ? "md:mr-auto md:pr-16" : "md:ml-auto md:pl-16",
                    activePhase === item.id ? "scale-105" : "hover:scale-102"
                  )}
                  onClick={() => setActivePhase(activePhase === item.id ? -1 : item.id)}
                >
                  <div className={cn(
                    "bg-white/80 backdrop-blur-sm rounded-2xl md:rounded-3xl p-4 md:p-8 border border-white/50 shadow-xl transition-all duration-300",
                    activePhase === item.id ? "shadow-2xl ring-4 ring-blue-500/20" : ""
                  )}>
                    {/* Header */}
                    <div className="mb-4 md:mb-6">
                      <div className={cn(
                        "inline-flex items-center px-3 py-1.5 md:px-4 md:py-2 rounded-xl md:rounded-2xl text-white font-bold text-xs md:text-sm mb-2 md:mb-3 shadow-lg",
                        `bg-gradient-to-r ${item.color}`
                      )}>
                        {item.phase}
                      </div>
                      <h3 className="text-lg md:text-xl font-bold text-slate-800 mb-1 md:mb-2">{item.title}</h3>
                      <p className="text-xs md:text-sm font-medium text-slate-600">{item.subtitle}</p>
                    </div>

                    {/* Description */}
                    <p className="text-sm md:text-base text-slate-700 mb-4 md:mb-6 leading-relaxed">{item.description}</p>

                    {/* Skills and Opportunities */}
                    <div className={cn(
                      "transition-all duration-500 overflow-hidden",
                      activePhase === item.id ? "max-h-96 opacity-100" : "max-h-0 opacity-0"
                    )}>
                      <div className="grid grid-cols-1 lg:grid-cols-2 gap-3 md:gap-4 pt-3 md:pt-4 border-t border-slate-200">
                        <div>
                          <h4 className="font-semibold text-slate-800 mb-2 md:mb-3 text-sm md:text-base">K·ªπ nƒÉng ph√°t tri·ªÉn</h4>
                          <div className="space-y-1.5 md:space-y-2">
                            {item.skills.map((skill, skillIndex) => (
                              <div key={skillIndex} className="flex items-center gap-2">
                                <div className={cn(
                                  "w-1.5 h-1.5 md:w-2 md:h-2 rounded-full flex-shrink-0",
                                  `bg-gradient-to-r ${item.color}`
                                )}></div>
                                <span className="text-xs md:text-sm text-slate-700">{skill}</span>
                              </div>
                            ))}
                          </div>
                        </div>
                        <div>
                          <h4 className="font-semibold text-slate-800 mb-2 md:mb-3 text-sm md:text-base">C∆° h·ªôi</h4>
                          <div className="space-y-1.5 md:space-y-2">
                            {item.opportunities.map((opportunity, oppIndex) => (
                              <div key={oppIndex} className="flex items-center gap-2">
                                <div className={cn(
                                  "w-1.5 h-1.5 md:w-2 md:h-2 rounded-full flex-shrink-0",
                                  `bg-gradient-to-r ${item.color}`
                                )}></div>
                                <span className="text-xs md:text-sm text-slate-700">{opportunity}</span>
                              </div>
                            ))}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>
  );
}